// <auto-generated />
using System;
using GraduateWork.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GraduateWork.Server.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.CertificateOfSecondaryEducationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<float>("AverageMark")
                        .HasColumnName("average_mark");

                    b.Property<Guid?>("EntrantId")
                        .HasColumnName("entrant_id");

                    b.Property<string>("FullNameOfTheEducationalInstitution")
                        .HasColumnName("full_name_of_the_educational_institution");

                    b.Property<string>("SerialNumber")
                        .HasColumnName("serial_number");

                    b.Property<DateTime>("YearOfIssue")
                        .HasColumnName("year_of_issue");

                    b.HasKey("Id");

                    b.HasIndex("EntrantId")
                        .IsUnique();

                    b.ToTable("certificate_of_secondary_education");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.CertificateOfTestingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("EntrantId")
                        .HasColumnName("entrant_id");

                    b.Property<float>("FirstMark")
                        .HasColumnName("first_mark");

                    b.Property<string>("FirstSubject")
                        .HasColumnName("first_subject");

                    b.Property<float>("FourthMark")
                        .HasColumnName("fourth_mark");

                    b.Property<string>("FourthSubject")
                        .HasColumnName("fourth_subject");

                    b.Property<float>("SecondMark")
                        .HasColumnName("second_mark");

                    b.Property<string>("SecondSubject")
                        .HasColumnName("second_subject");

                    b.Property<string>("SerialNumber")
                        .HasColumnName("serial_number");

                    b.Property<float>("ThirdMark")
                        .HasColumnName("third_mark");

                    b.Property<string>("ThirdSubject")
                        .HasColumnName("third_subject");

                    b.Property<DateTime>("YearOfIssue")
                        .HasColumnName("year_of_issue");

                    b.HasKey("Id");

                    b.HasIndex("EntrantId")
                        .IsUnique();

                    b.ToTable("certificates_of_testing");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.EntrantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnName("birthday");

                    b.Property<string>("FirstName")
                        .HasColumnName("firs_name");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("entrants");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.SpecialityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<float>("AdditionalFactor")
                        .HasColumnName("additional_factory");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int>("CountOfStatePlaces")
                        .HasColumnName("count_of_state_places");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("specialities");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.StatementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("EntrantId")
                        .HasColumnName("entrant_id");

                    b.Property<float>("ExtraScore")
                        .HasColumnName("extra_score");

                    b.Property<float>("TotalScore")
                        .HasColumnName("total_score");

                    b.Property<Guid>("UniversityId")
                        .HasColumnName("university_id");

                    b.HasKey("Id");

                    b.HasIndex("EntrantId");

                    b.HasIndex("UniversityId");

                    b.ToTable("statements");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.UniversityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<string>("LevelOfAccreditation")
                        .HasColumnName("level_of_accreditation");

                    b.HasKey("Id");

                    b.ToTable("universities");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.UniversitySpecialityEntity", b =>
                {
                    b.Property<Guid>("SpecialtyId")
                        .HasColumnName("specialty_id");

                    b.Property<Guid>("UniversityId")
                        .HasColumnName("university_id");

                    b.HasKey("SpecialtyId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("university_specialities");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.CertificateOfSecondaryEducationEntity", b =>
                {
                    b.HasOne("GraduateWork.Server.Data.Entities.EntrantEntity", "Entrant")
                        .WithOne("CertificateOfSecondaryEducation")
                        .HasForeignKey("GraduateWork.Server.Data.Entities.CertificateOfSecondaryEducationEntity", "EntrantId");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.CertificateOfTestingEntity", b =>
                {
                    b.HasOne("GraduateWork.Server.Data.Entities.EntrantEntity", "Entrant")
                        .WithOne("CertificateOfTesting")
                        .HasForeignKey("GraduateWork.Server.Data.Entities.CertificateOfTestingEntity", "EntrantId");
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.EntrantEntity", b =>
                {
                    b.HasOne("GraduateWork.Server.Data.Entities.UserEntity", "User")
                        .WithOne("Entrant")
                        .HasForeignKey("GraduateWork.Server.Data.Entities.EntrantEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.StatementEntity", b =>
                {
                    b.HasOne("GraduateWork.Server.Data.Entities.EntrantEntity", "Entrant")
                        .WithMany("Statements")
                        .HasForeignKey("EntrantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GraduateWork.Server.Data.Entities.UniversityEntity", "University")
                        .WithMany("Statements")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraduateWork.Server.Data.Entities.UniversitySpecialityEntity", b =>
                {
                    b.HasOne("GraduateWork.Server.Data.Entities.SpecialityEntity", "Specialty")
                        .WithMany("UniversitySpecialities")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GraduateWork.Server.Data.Entities.UniversityEntity", "University")
                        .WithMany("UniversitySpecialities")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
